ğŸ”„ 7. Spring Data JPA, Hibernate ORM ve GeliÅŸmiÅŸ Ä°liÅŸkiler

JPA (Java Persistence API): Java nesnelerini veritabanÄ± tablolarÄ±na eÅŸlemek (map) iÃ§in bir standarttÄ±r (spesifikasyon).
Hibernate: JPA'nÄ±n en popÃ¼ler implementasyonudur (ORM aracÄ±).
--------------------------------------------------------
Entity ve Repository:
@Entity // Bu sÄ±nÄ±fÄ±n bir veritabanÄ± tablosuna karÅŸÄ±lÄ±k geldiÄŸini belirtir.
@Table(name = "kullanicilar")
public class Kullanici {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "kullanici_adi", unique = true, nullable = false)
    private String kullaniciAdi;

    // ... constructors, getters, setters //
}

@Repository // Spring'e bu interface'in bir veritabanÄ± deposu olduÄŸunu sÃ¶yler.
public interface KullaniciRepository extends JpaRepository<Kullanici, Long> {
    // Spring Data JPA, metot isminden sorgu Ã¼retir.
    Optional<Kullanici> findByKullaniciAdi(String kullaniciAdi);
}

----------------------------------------------------------------
Ä°liÅŸkisel EÅŸleme (Advanced Mapping):

@OneToMany (Bire Ã‡ok): Bir yazarÄ±n birden Ã§ok kitabÄ± olabilir.
@ManyToOne (Ã‡oka Bir): Birden Ã§ok kitap bir yazara ait olabilir.
@ManyToMany (Ã‡oka Ã‡ok): Bir Ã¶ÄŸrenci birden Ã§ok derse, bir ders de birden Ã§ok Ã¶ÄŸrenciye sahip olabilir.

Kod Ã–rneÄŸi (@OneToMany / @ManyToOne):
// Yazar Entity'si
@Entity
public class Yazar {
    @Id @GeneratedValue
    private Long id;
    private String ad;

    @OneToMany(mappedBy = "yazar", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Kitap> kitaplar = new ArrayList<>();
    // ...
}

// Kitap Entity'si
@Entity
public class Kitap {
    @Id @GeneratedValue
    private Long id;
    private String baslik;

    @ManyToOne(fetch = FetchType.LAZY) // BirÃ§ok kitap tek bir yazara ait
    @JoinColumn(name = "yazar_id") // Ä°liÅŸkiyi kuracak foreign key
    private Yazar yazar;
    // ...
}


