ğŸ”„ 7. Spring Data JPA, Hibernate ORM ve GeliÅŸmiÅŸ Ä°liÅŸkiler NotlarÄ±
// Java uygulamalarÄ± ile iliÅŸkisel veritabanlarÄ± arasÄ±nda kÃ¶prÃ¼ kurmak,
// veri kalÄ±cÄ±lÄ±ÄŸÄ±nÄ± saÄŸlamak ve nesne-iliÅŸkisel eÅŸleme (ORM) yapmak iÃ§in kullanÄ±lÄ±r.

// JPA (Java Persistence API): Java nesnelerini veritabanÄ± tablolarÄ±na eÅŸlemek iÃ§in bir Jave EE standardÄ±dÄ±r (spesifikasyon).
//                              GeliÅŸtiricilerin doÄŸrudan SQL yazmadan veritabanÄ± iÅŸlemleri yapmasÄ±nÄ± saÄŸlar.
// Hibernate: JPA'nÄ±n en popÃ¼ler ve yaygÄ±n olarak kullanÄ±lan implementasyonudur (ORM aracÄ±).
//            JPA spesifikasyonunu uygulayarak Java objelerini veritabanÄ± satÄ±rlarÄ±na dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r ve tersi.
// Spring Data JPA: JPA'nÄ±n Ã¼zerine inÅŸa edilmiÅŸ, veri eriÅŸim katmanÄ±nÄ± daha da basitleÅŸtiren bir Spring projesidir.
//                 Repository interface'leri aracÄ±lÄ±ÄŸÄ±yla veri tabanÄ± iÅŸlemlerini otomatik olarak saÄŸlar.

import jakarta.persistence.*; // JPA (Jakarta Persistence API) annotation'larÄ±
import org.springframework.data.jpa.repository.JpaRepository; // Spring Data JPA
import org.springframework.stereotype.Repository; // Spring Core annotation'Ä±
import java.util.ArrayList;
import java.util.List;
import java.util.Optional; // Nullable dÃ¶nÃ¼ÅŸ deÄŸerleri iÃ§in

// --- Entity ve Repository ---
// Entity sÄ±nÄ±flarÄ±, veritabanÄ± tablolarÄ±na karÅŸÄ±lÄ±k gelen Java objeleridir.
// Repository interface'leri ise bu entity'ler Ã¼zerinde CRUD (Create, Read, Update, Delete)
// operasyonlarÄ±nÄ± ve daha karmaÅŸÄ±k sorgularÄ± tanÄ±mlar.

@Entity // Bu sÄ±nÄ±fÄ±n bir veritabanÄ± tablosuna karÅŸÄ±lÄ±k geldiÄŸini belirtir.
@Table(name = "kullanicilar") // VeritabanÄ±ndaki tablo adÄ±nÄ± belirtir (isteÄŸe baÄŸlÄ±, varsayÄ±lan sÄ±nÄ±f adÄ±dÄ±r).
public class Kullanici {
    @Id // Bu alanÄ±n tablonun birincil anahtarÄ± (Primary Key) olduÄŸunu belirtir.
    @GeneratedValue(strategy = GenerationType.IDENTITY) // ID'nin veritabanÄ± tarafÄ±ndan otomatik artÄ±rÄ±lacaÄŸÄ±nÄ± belirtir.
    // IDENTITY: VeritabanÄ±nÄ±n kendi otomatik artÄ±rma Ã¶zelliÄŸini kullanÄ±r (MySQL, PostgreSQL).
    // AUTO: VeritabanÄ±na gÃ¶re otomatik seÃ§er (varsayÄ±lan).
    // SEQUENCE: VeritabanÄ± sekanslarÄ±nÄ± kullanÄ±r.
    // TABLE: Bir yardÄ±mcÄ± tablo kullanÄ±r.
    private Long id;

    @Column(name = "kullanici_adi", unique = true, nullable = false, length = 50) // SÃ¼tun Ã¶zelliklerini belirler.
    // unique: Bu sÃ¼tundaki deÄŸerlerin benzersiz olmasÄ±nÄ± saÄŸlar.
    // nullable: Bu sÃ¼tunun boÅŸ olamayacaÄŸÄ±nÄ± (NOT NULL) belirtir.
    // length: VARCHAR tipi iÃ§in maksimum uzunluÄŸu belirler.
    private String kullaniciAdi;

    private String email; // VarsayÄ±lan olarak sÃ¼tun adÄ± 'email' olur

    // --- Constructor'lar ---
    public Kullanici() {
        // JPA/Hibernate, no-arg constructor'Ä± gerektirir.
    }

    public Kullanici(String kullaniciAdi, String email) {
        this.kullaniciAdi = kullaniciAdi;
        this.email = email;
    }

    // --- Getter ve Setter MetotlarÄ± (KapsÃ¼lleme iÃ§in) ---
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getKullaniciAdi() {
        return kullaniciAdi;
    }

    public void setKullaniciAdi(String kullaniciAdi) {
        this.kullaniciAdi = kullaniciAdi;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Override
    public String toString() {
        return "Kullanici{" +
                "id=" + id +
                ", kullaniciAdi='" + kullaniciAdi + '\'' +
                ", email='" + email + '\'' +
                '}';
    }
}

@Repository // Spring'e bu interface'in bir veritabanÄ± deposu (Data Access Object - DAO) olduÄŸunu sÃ¶yler.
public interface KullaniciRepository extends JpaRepository<Kullanici, Long> {
    // Spring Data JPA'nÄ±n gÃ¼cÃ¼ burada devreye girer:
    // Metot isminden otomatik olarak SQL sorgusu Ã¼retir (Query Derivation).
    // findByKullaniciAdi metodu, "SELECT * FROM kullanicilar WHERE kullanici_adi = ?" sorgusuna dÃ¶nÃ¼ÅŸÃ¼r.
    Optional<Kullanici> findByKullaniciAdi(String kullaniciAdi);

    // DiÄŸer Ã¶rnekler:
    List<Kullanici> findByEmailContaining(String keyword); // E-postasÄ± belirli bir kelime iÃ§eren kullanÄ±cÄ±larÄ± bul
    long countByKullaniciAdi(String kullaniciAdi); // Belirli bir kullanÄ±cÄ± adÄ±na sahip kaÃ§ kullanÄ±cÄ± olduÄŸunu say
}


// --- Ä°liÅŸkisel EÅŸleme (Advanced Mapping) ---
// VeritabanÄ±ndaki tablolar arasÄ±ndaki iliÅŸkileri (One-to-Many, Many-to-One, Many-to-Many)
// Java Entity'leri arasÄ±nda modellemeyi saÄŸlar.

// @OneToMany (Bire Ã‡ok): Bir YazarÄ±n birden Ã§ok kitabÄ± olabilir.
// @ManyToOne (Ã‡oka Bir): Birden Ã§ok Kitap bir Yazara ait olabilir.
// @ManyToMany (Ã‡oka Ã‡ok): Bir Ã–ÄŸrenci birden Ã§ok Derse katÄ±labilir, bir Ders de birden Ã§ok Ã¶ÄŸrenciye sahip olabilir.

// --------------------------------------------------------------------------------------
// Kod Ã–rneÄŸi (@OneToMany / @ManyToOne)
// Yazar ve Kitap arasÄ±nda bire-Ã§ok iliÅŸkiyi gÃ¶sterir.
// --------------------------------------------------------------------------------------

// Yazar Entity'si: Bir Yazar'Ä±n birden Ã§ok KitabÄ± olabilir.
@Entity
@Table(name = "yazarlar")
class Yazar {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String ad;

    // @OneToMany: Bir Yazar'Ä±n birden Ã§ok KitabÄ± vardÄ±r.
    // mappedBy = "yazar": Kitap sÄ±nÄ±fÄ±ndaki "yazar" alanÄ±, bu iliÅŸkinin sahibidir.
    //                      Bu, Kitap tablosunda Yazar ID'sini tutan foreign key'in nerede olduÄŸunu belirtir.
    // cascade = CascadeType.ALL: Yazar Ã¼zerinde yapÄ±lan tÃ¼m iÅŸlemlerin (oluÅŸturma, gÃ¼ncelleme, silme)
    //                            iliÅŸkili Kitaplar Ã¼zerinde de uygulanmasÄ±nÄ± saÄŸlar.
    // orphanRemoval = true: Bir Yazar'dan bir Kitap kaldÄ±rÄ±ldÄ±ÄŸÄ±nda, o KitabÄ±n veritabanÄ±ndan da silinmesini saÄŸlar.
    @OneToMany(mappedBy = "yazar", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Kitap> kitaplar = new ArrayList<>(); // Bir Yazar'Ä±n Kitap listesi

    // --- Constructor'lar ---
    public Yazar() {}
    public Yazar(String ad) { this.ad = ad; }

    // --- Getter ve Setter MetotlarÄ± ---
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public String getAd() { return ad; }
    public void setAd(String ad) { this.ad = ad; }
    public List<Kitap> getKitaplar() { return kitaplar; }
    // Setter yerine, kitap ekleme/Ã§Ä±karma iÃ§in yardÄ±mcÄ± metotlar tercih edilir:
    public void addKitap(Kitap kitap) {
        kitaplar.add(kitap);
        kitap.setYazar(this); // Ä°liÅŸkinin iki tarafÄ±nÄ± da baÄŸlar
    }
    public void removeKitap(Kitap kitap) {
        kitaplar.remove(kitap);
        kitap.setYazar(null); // Ä°liÅŸkinin baÄŸÄ±nÄ± koparÄ±r
    }

    @Override
    public String toString() {
        return "Yazar{" + "id=" + id + ", ad='" + ad + '\'' + '}';
    }
}

// Kitap Entity'si: Bir KitabÄ±n tek bir YazarÄ± olabilir.
@Entity
@Table(name = "kitaplar")
class Kitap {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String baslik;

    // @ManyToOne: BirÃ§ok Kitap tek bir Yazara ait olabilir.
    // fetch = FetchType.LAZY: Yazar objesinin, Kitap objesi Ã§ekildiÄŸinde hemen deÄŸil,
    //                         gerÃ§ekten ihtiyaÃ§ duyulduÄŸunda (eriÅŸildiÄŸinde) yÃ¼klenmesini saÄŸlar.
    //                         (EAGER ise hemen yÃ¼kler, performans dÃ¼ÅŸÃ¼nÃ¼lerek Lazy tercih edilir).
    // @JoinColumn(name = "yazar_id"): Bu sÃ¼tunun, Yazar tablosundaki primary key'i referans alan
    //                                  foreign key olduÄŸunu belirtir.
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "yazar_id")
    private Yazar yazar; // KitabÄ±n ait olduÄŸu Yazar objesi

    // --- Constructor'lar ---
    public Kitap() {}
    public Kitap(String baslik, Yazar yazar) {
        this.baslik = baslik;
        this.yazar = yazar;
    }
    public Kitap(String baslik) {
        this.baslik = baslik;
    }

    // --- Getter ve Setter MetotlarÄ± ---
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public String getBaslik() { return baslik; }
    public void setBaslik(String baslik) { this.baslik = baslik; }
    public Yazar getYazar() { return yazar; }
    public void setYazar(Yazar yazar) { this.yazar = yazar; }

    @Override
    public String toString() {
        return "Kitap{" + "id=" + id + ", baslik='" + baslik + '\'' + '}';
    }
}


// --- Main SÄ±nÄ±fÄ± (Ã–rnek KullanÄ±m SimÃ¼lasyonu) ---
// Bu sÄ±nÄ±f, Entity ve Repository'lerin nasÄ±l kullanÄ±lacaÄŸÄ±na dair bir simÃ¼lasyon sunar.
// GerÃ§ek bir Spring Boot uygulamasÄ±nda, bu iÅŸlemler Repository'ler aracÄ±lÄ±ÄŸÄ±yla bir servis katmanÄ±nda yapÄ±lÄ±r.
public class JpaAndRelationshipsExample {

    public static void main(String[] args) {
        System.out.println("--- Spring Data JPA ve Ä°liÅŸkiler Ã–rnekleri ---");

        // Kullanici Entity ve Repository Ã¶rneÄŸi (simÃ¼lasyon)
        System.out.println("\n--- Kullanici Entity ve Repository ---");
        Kullanici yeniKullanici = new Kullanici("developer_ahmet", "ahmet@example.com");
        // GerÃ§ekte: kullaniciRepository.save(yeniKullanici);
        yeniKullanici.setId(1L); // ID'nin DB tarafÄ±ndan atandÄ±ÄŸÄ±nÄ± simÃ¼le ediyoruz.
        System.out.println("OluÅŸturulan KullanÄ±cÄ±: " + yeniKullanici);

        Optional<Kullanici> bulunanKullanici = Optional.of(yeniKullanici); // findByKullaniciAdi simÃ¼lasyonu
        if (bulunanKullanici.isPresent()) {
            System.out.println("Bulunan KullanÄ±cÄ± (developer_ahmet): " + bulunanKullanici.get());
        }

        // Yazar ve Kitap Ä°liÅŸkisi Ã–rneÄŸi (simÃ¼lasyon)
        System.out.println("\n--- Yazar ve Kitap Ä°liÅŸkisi (@OneToMany / @ManyToOne) ---");

        Yazar yazar1 = new Yazar("Stephen King");
        yazar1.setId(101L); // ID'nin DB tarafÄ±ndan atandÄ±ÄŸÄ±nÄ± simÃ¼le ediyoruz.

        Kitap kitap1 = new Kitap("It");
        Kitap kitap2 = new Kitap("The Shining");

        // Ä°liÅŸkileri iki taraflÄ± kurma (bi-directional mapping)
        yazar1.addKitap(kitap1);
        yazar1.addKitap(kitap2);

        // GerÃ§ekte: yazarRepository.save(yazar1);
        // Bu save iÅŸlemi cascade ayarÄ± sayesinde kitaplarÄ± da kaydederdi.

        System.out.println(yazar1.getAd() + " tarafÄ±ndan yazÄ±lan kitaplar:");
        for (Kitap kitap : yazar1.getKitaplar()) {
            System.out.println("- " + kitap.getBaslik() + " (Yazar: " + kitap.getYazar().getAd() + ")");
        }

        // Bir kitabÄ±n yazar bilgisine eriÅŸim
        System.out.println(kitap1.getBaslik() + " kitabÄ±nÄ±n yazarÄ±: " + kitap1.getYazar().getAd());

        // Ä°liÅŸkiden kitap kaldÄ±rma ve orphanRemoval etkisi (simÃ¼lasyon)
        // yazar1.removeKitap(kitap1);
        // Bu durumda 'kitap1' veritabanÄ±ndan da silinirdi (orphanRemoval=true sayesinde).
    }
}