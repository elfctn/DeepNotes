// ğŸŒ± 5. Spring Boot ve Temelleri NotlarÄ±
// Spring Boot, minimum konfigÃ¼rasyonla, Ã¼retime hazÄ±r Spring tabanlÄ± uygulamalar oluÅŸturmayÄ± kolaylaÅŸtÄ±rÄ±r.
// HÄ±z, verimlilik ve "konfigÃ¼rasyondan Ã§ok uzlaÅŸÄ±m" (convention over configuration) ilkeleriyle Ã¶ne Ã§Ä±kar.

// Gerekli Spring Boot ve Lombok kÃ¼tÃ¼phanelerini iÃ§e aktarÄ±yoruz.
// Lombok annotation'larÄ± iÃ§in import'lar burada varsayÄ±lÄ±r.
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;

// Lombok kÃ¼tÃ¼phanesi iÃ§in import'lar (gerÃ§ek bir dosyada gereklidir)
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;


// --- Ana Dosya ve Annotationlar ---
// UygulamanÄ±n baÅŸlangÄ±Ã§ noktasÄ±dÄ±r. main metodu, Spring uygulamasÄ±nÄ± bootstrap eder.
@SpringBootApplication // @Configuration, @EnableAutoConfiguration ve @ComponentScan'i birleÅŸtirir.
public class DemoApplication {
    public static void main(String[] args) {
        // Spring uygulamasÄ±nÄ± baÅŸlatÄ±r.
        SpringApplication.run(DemoApplication.class, args);
    }
}

/*
 * @SpringBootApplication: Bu meta-annotation, Ã¼Ã§ temel Spring Boot annotation'Ä±nÄ± bir araya getirir:
 *
 * 1. @Configuration: Bu sÄ±nÄ±fÄ±n Spring konteyneri tarafÄ±ndan yÃ¶netilen bean tanÄ±mlamalarÄ± iÃ§in bir kaynak olduÄŸunu belirtir.
 * 2. @EnableAutoConfiguration: Spring Boot'un classpath'indeki JAR baÄŸÄ±mlÄ±lÄ±klarÄ±na, diÄŸer bean'lere ve uygulama ayarlarÄ±na
 * dayanarak otomatik olarak Spring konfigÃ¼rasyonunu ayarlamasÄ±nÄ± saÄŸlar. Ã–rneÄŸin, 'spring-webmvc' varsa DispatcherServlet'i
 * otomatik yapÄ±landÄ±rÄ±r.
 * 3. @ComponentScan: Spring'e, bu paketten ve alt paketlerinden @Component, @Service, @Repository, @Controller gibi
 * Spring bileÅŸenlerini taramasÄ±nÄ± ve bunlarÄ± Spring konteynerine kaydetmesini sÃ¶yler.
 */


// --- REST Controller ---
// Web isteklerini (HTTP) karÅŸÄ±layan ve yanÄ±tlayan sÄ±nÄ±flardÄ±r. Genellikle JSON/XML gibi veri formatlarÄ±nÄ± dÃ¶ndÃ¼rÃ¼rler.
@RestController
@RequestMapping("/api/v1/products") // Bu controller'daki tÃ¼m endpoint'ler bu yolla baÅŸlar.
public class ProductController {

    // ProductService baÄŸÄ±mlÄ±lÄ±ÄŸÄ±. Bu, Spring tarafÄ±ndan enjekte edilecektir.
    private final ProductService productService;

    // Constructor Injection: BaÄŸÄ±mlÄ±lÄ±klarÄ± enjekte etmenin en iyi yolu.
    // @Autowired annotation'Ä±, Spring'in bu constructor'Ä± kullanarak baÄŸÄ±mlÄ±lÄ±ÄŸÄ± saÄŸlamasÄ±nÄ± sÃ¶yler.
    @Autowired
    public ProductController(ProductService productService) {
        this.productService = productService;
    }

    // HTTP GET isteÄŸi -> /api/v1/products/{id}
    @GetMapping("/{id}")
    public ResponseEntity<Product> getProductById(@PathVariable Long id) {
        Product product = productService.findById(id); // ProductService'den Ã¼rÃ¼n bulma
        return ResponseEntity.ok(product); // 200 OK statÃ¼sÃ¼ ile Ã¼rÃ¼nÃ¼ dÃ¶ndÃ¼rÃ¼r.
    }

    // HTTP POST isteÄŸi -> /api/v1/products
    @PostMapping
    public ResponseEntity<Product> createProduct(@RequestBody Product product) {
        Product savedProduct = productService.save(product); // ProductService ile Ã¼rÃ¼nÃ¼ kaydetme
        // 201 CREATED statÃ¼sÃ¼ ile kaydedilen Ã¼rÃ¼nÃ¼ dÃ¶ndÃ¼rÃ¼r.
        return new ResponseEntity<>(savedProduct, HttpStatus.CREATED);
    }
}

/*
 * @RestController: Bu, @Controller ve @ResponseBody annotation'larÄ±nÄ±n birleÅŸimidir. Bu sÄ±nÄ±fÄ±n RESTful web
 * servisleri iÃ§in bir controller olduÄŸunu ve metodlarÄ±n doÄŸrudan yanÄ±t gÃ¶vdesini (HTTP response body) dÃ¶ndÃ¼receÄŸini
 * belirtir (genellikle JSON veya XML formatÄ±nda).
 * @RequestMapping: SÄ±nÄ±f veya metot seviyesinde bir veya daha fazla URL yolunu (URI) bir handler metoduna eÅŸlemek iÃ§in kullanÄ±lÄ±r.
 * @Autowired: Spring'in baÄŸÄ±mlÄ±lÄ±k enjeksiyonu (Dependency Injection) mekanizmasÄ±nÄ± kullanarak bir bean'in
 * baÄŸÄ±mlÄ±lÄ±klarÄ±nÄ± otomatik olarak Ã§Ã¶zÃ¼mlemesini ve saÄŸlamasÄ±nÄ± saÄŸlar. Constructor injection, enjeksiyon iÃ§in en Ã§ok
 * tercih edilen yÃ¶ntemdir, Ã§Ã¼nkÃ¼ immutability'yi teÅŸvik eder ve test edilebilirliÄŸi artÄ±rÄ±r.
 * @GetMapping, @PostMapping: @RequestMapping'in Ã¶zel versiyonlarÄ±dÄ±r ve sÄ±rasÄ±yla HTTP GET ve POST isteklerini
 * belirli metotlara eÅŸler. Benzer ÅŸekilde @PutMapping, @DeleteMapping vb. de mevcuttur.
 * @PathVariable: URL yolundaki bir deÄŸiÅŸkeni metot parametresine baÄŸlamak iÃ§in kullanÄ±lÄ±r (Ã¶rneÄŸin /products/{id}).
 * @RequestBody: Gelen HTTP isteÄŸinin gÃ¶vdesini (genellikle JSON veya XML) bir Java nesnesine dÃ¶nÃ¼ÅŸtÃ¼rmek iÃ§in kullanÄ±lÄ±r.
 * ResponseEntity: HTTP yanÄ±tÄ±nÄ±n tamamÄ±nÄ± (statÃ¼ kodu, baÅŸlÄ±klar ve gÃ¶vde) kontrol etmeni saÄŸlar.
 * HttpStatus: Standart HTTP statÃ¼ kodlarÄ±nÄ± (Ã¶rn. 200 OK, 201 CREATED, 404 NOT FOUND) temsil eden bir enum'dur.
 */


// --- Lombok ---
// Lombok, Java'da boilerplate (tekrar eden, kalÄ±p) kodlarÄ± azaltmak iÃ§in kullanÄ±lan bir kÃ¼tÃ¼phanedir.
// Derleme zamanÄ±nda Ã§alÄ±ÅŸÄ±r ve getter, setter, constructor, equals, hashCode, toString gibi metodlarÄ±
// otomatik olarak oluÅŸturur. Bu, kodunu daha kÄ±sa ve okunabilir hale getirir.

// Ã–rnek KullanÄ±m:
// Bir Product sÄ±nÄ±fÄ± iÃ§in:

// Lombok annotation'larÄ± ile Product sÄ±nÄ±fÄ± tanÄ±mÄ±:
@Data // @Getter, @Setter, @ToString, @EqualsAndHashCode ve @RequiredArgsConstructor'Ä± birleÅŸtirir.
@NoArgsConstructor // Parametresiz bir constructor oluÅŸturur.
@AllArgsConstructor // TÃ¼m alanlarÄ± iÃ§eren bir constructor oluÅŸturur.
class Product { // Bu sÄ±nÄ±f, gerÃ§ek bir Spring Boot uygulamasÄ±nda @Entity olarak da iÅŸaretlenebilir.
    private Long id;
    private String name;
    // Derleme sonrasÄ±, Lombok otomatik olarak tÃ¼m metodlarÄ± ekleyecektir.
}

// ProductController iÃ§inde kullanÄ±lan Service arayÃ¼zÃ¼ ve implementasyonu (Ã¶rnek amaÃ§lÄ±)
interface ProductService {
    Product findById(Long id);
    Product save(Product product);
}

class ProductServiceImpl implements ProductService {
    // Burada gerÃ§ek bir Repository baÄŸÄ±mlÄ±lÄ±ÄŸÄ± olabilir.
    @Override
    public Product findById(Long id) {
        // Mock data or actual database call
        System.out.println("Finding product by ID: " + id);
        return new Product(id, "Sample Product " + id);
    }

    @Override
    public Product save(Product product) {
        // Mock data or actual database save operation
        System.out.println("Saving product: " + product.getName());
        if (product.getId() == null) {
            product.setId(System.currentTimeMillis()); // Basit bir ID atama
        }
        return product;
    }
}

/*
 * Lombok Maven BaÄŸÄ±mlÄ±lÄ±ÄŸÄ± (pom.xml'e eklenmeli):
 * <dependency>
 * <groupId>org.projectlombok</groupId>
 * <artifactId>lombok</artifactId>
 * <optional>true</optional> // Sadece derleme zamanÄ± gerektiÄŸi iÃ§in isteÄŸe baÄŸlÄ± iÅŸaretlenir
 * </dependency>
 */


// --- Spring Boot Actuator ---
// Spring Boot uygulamalarÄ±nÄ±n izlenmesi ve yÃ¶netilmesi iÃ§in Ã¼retim ortamÄ±na hazÄ±r Ã¶zellikler sunar.
// UygulamanÄ±n Ã§alÄ±ÅŸma zamanÄ± durumunu (saÄŸlÄ±k durumu, metrikler, ortam bilgisi, loglar vb.)
// kontrol etmeyi ve gÃ¶zlemlemeyi kolaylaÅŸtÄ±rÄ±r.

/*
 * SaÄŸladÄ±ÄŸÄ± Endpoint'lerden BazÄ±larÄ±:
 * /actuator/health: UygulamanÄ±n saÄŸlÄ±k durumunu gÃ¶sterir (DB baÄŸlantÄ±sÄ±, disk alanÄ± vb.).
 * /actuator/info: Uygulama hakkÄ±nda Ã¶zel bilgiler (sÃ¼rÃ¼m, oluÅŸturma zamanÄ± vb.).
 * /actuator/metrics: Uygulama metriklerini (CPU kullanÄ±mÄ±, bellek, HTTP istekleri vb.) saÄŸlar.
 * /actuator/env: Spring Environment Ã¶zelliklerini gÃ¶sterir.
 * /actuator/beans: Uygulamadaki tÃ¼m Spring bean'lerini listeler.
 */

/*
 * Actuator Maven BaÄŸÄ±mlÄ±lÄ±ÄŸÄ± (pom.xml'e eklenmeli):
 * <dependency>
 * <groupId>org.springframework.boot</groupId>
 * <artifactId>spring-boot-starter-actuator</artifactId>
 * </dependency>
 */

/*
 * KonfigÃ¼rasyon (application.properties/yml'ye eklenmeli):
 * VarsayÄ±lan olarak sadece health ve info endpoint'leri aÃ§Ä±ktÄ±r. DiÄŸerlerini etkinleÅŸtirmek iÃ§in:
 * management.endpoints.web.exposure.include=*
 * # veya sadece belirli endpoint'leri aÃ§mak iÃ§in:
 * # management.endpoints.web.exposure.include=health,info,metrics
 */


// --- BaÄŸÄ±mlÄ±lÄ±k YÃ¶netimi (Dependencies) ---
// Spring Boot, baÄŸÄ±mlÄ±lÄ±k yÃ¶netimini bÃ¼yÃ¼k Ã¶lÃ§Ã¼de basitleÅŸtirir.

/*
 * Starter Pom'lar: Spring Boot, belirli bir teknoloji yÄ±ÄŸÄ±nÄ± iÃ§in gerekli tÃ¼m baÄŸÄ±mlÄ±lÄ±klarÄ± ve bunlarÄ±n
 * uyumlu versiyonlarÄ±nÄ± tek bir "starter" baÄŸÄ±mlÄ±lÄ±ÄŸÄ± altÄ±nda toplar. Bu, pom.xml dosyanÄ±zÄ± Ã§ok daha temiz tutar
 * ve versiyon Ã§akÄ±ÅŸmalarÄ±nÄ± azaltÄ±r.
 *
 * Ã–rneÄŸin, bir web uygulamasÄ± iÃ§in:
 * <dependency>
 * <groupId>org.springframework.boot</groupId>
 * <artifactId>spring-boot-starter-web</artifactId>
 * </dependency>
 * Bu starter, Tomcat, Spring MVC, Jackson (JSON iÅŸleme) gibi birÃ§ok baÄŸÄ±mlÄ±lÄ±ÄŸÄ± otomatik olarak getirir.
 *
 * Veri tabanÄ± eriÅŸimi iÃ§in:
 * <dependency>
 * <groupId>org.springframework.boot</groupId>
 * <artifactId>spring-boot-starter-data-jpa</artifactId>
 * </dependency>
 * Bu starter, Hibernate (ORM), Spring Data JPA ve bir veri tabanÄ± driver'Ä± (Ã¶rneÄŸin H2) gibi baÄŸÄ±mlÄ±lÄ±klarÄ± iÃ§erir.
 */

/*
 * Otomatik Versiyon YÃ¶netimi: 'spring-boot-starter-parent' veya 'spring-boot-dependencies' pom'unu kullandÄ±ÄŸÄ±nÄ±zda,
 * Spring Boot bu starter'larÄ±n ve iÃ§erdikleri baÄŸÄ±mlÄ±lÄ±klarÄ±n uyumlu versiyonlarÄ±nÄ± sizin iÃ§in otomatik olarak yÃ¶netir.
 * Bu, baÄŸÄ±mlÄ±lÄ±k versiyonlarÄ±yla uÄŸraÅŸma yÃ¼kÃ¼nÃ¼ azaltÄ±r.
 */

/*
 * Ã–rnek 'pom.xml' YapÄ±sÄ± (Bir Maven projesinin ana baÄŸÄ±mlÄ±lÄ±k dosyasÄ±):
 * <?xml version="1.0" encoding="UTF-8"?>
 * <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 * xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
 * <modelVersion>4.0.0</modelVersion>
 * <parent>
 * <groupId>org.springframework.boot</groupId>
 * <artifactId>spring-boot-starter-parent</artifactId>
 * <version>3.2.0</version> // Spring Boot versiyonu
 * <relativePath/> * </parent>
 * <groupId>com.example</groupId>
 * <artifactId>demo</artifactId>
 * <version>0.0.1-SNAPSHOT</version>
 * <name>demo</name>
 * <description>Demo project for Spring Boot</description>
 *
 * <properties>
 * <java.version>17</java.version>
 * </properties>
 *
 * <dependencies>
 * * <dependency>
 * <groupId>org.springframework.boot</groupId>
 * <artifactId>spring-boot-starter-web</artifactId>
 * </dependency>
 * * <dependency>
 * <groupId>org.springframework.boot</groupId>
 * <artifactId>spring-boot-starter-data-jpa</artifactId>
 * </dependency>
 * * <dependency>
 * <groupId>org.postgresql</groupId>
 * <artifactId>postgresql</artifactId>
 * <scope>runtime</scope>
 * </dependency>
 * * <dependency>
 * <groupId>org.projectlombok</groupId>
 * <artifactId>lombok</artifactId>
 * <optional>true</optional>
 * </dependency>
 * * <dependency>
 * <groupId>org.springframework.boot</groupId>
 * <artifactId>spring-boot-starter-actuator</artifactId>
 * </dependency>
 * * <dependency>
 * <groupId>org.springframework.boot</groupId>
 * <artifactId>spring-boot-starter-test</artifactId>
 * <scope>test</scope>
 * </dependency>
 * </dependencies>
 *
 * <build>
 * <plugins>
 * <plugin>
 * <groupId>org.springframework.boot</groupId>
 * <artifactId>spring-boot-maven-plugin</artifactId>
 * <configuration>
 * <excludes>
 * <exclude>
 * <groupId>org.projectlombok</groupId>
 * <artifactId>lombok</artifactId>
 * </exclude>
 * </excludes>
 * </configuration>
 * </plugin>
 * </plugins>
 * </build>
 * </project>
 */